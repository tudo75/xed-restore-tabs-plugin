/* xed.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Xed", gir_namespace = "Xed", gir_version = "1.0", lower_case_cprefix = "xed_")]
namespace Xed {
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_app_get_type ()")]
	public class App : Gtk.Application, GLib.ActionGroup, GLib.ActionMap {
		[CCode (has_construct_function = false)]
		protected App ();
		public unowned Xed.Window create_window (Gdk.Screen? screen);
		public GLib.List<weak Xed.Document> get_documents ();
		public GLib.List<weak Xed.Window> get_main_windows ();
		public GLib.List<weak Xed.View> get_views ();
		[NoWrapper]
		public virtual string help_link_id (string name, string link_id);
		public virtual void set_window_title (Xed.Window window, string title);
		public virtual bool show_help (Gtk.Window parent, string name, string link_id);
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_document_get_type ()")]
	public class Document : Gtk.SourceBuffer {
		[CCode (has_construct_function = false)]
		public Document ();
		public string get_content_type ();
		public bool get_deleted ();
		public unowned Gtk.SourceEncoding get_encoding ();
		public unowned Gtk.SourceFile get_file ();
		public unowned Gtk.SourceLanguage get_language ();
		public GLib.File? get_location ();
		public string get_metadata (string key);
		public string get_mime_type ();
		public Gtk.SourceNewlineType get_newline_type ();
		public bool get_readonly ();
		public Gtk.SourceSearchContext get_search_context ();
		public string get_short_name_for_display ();
		public string get_uri_for_display ();
		public bool goto_line (int line);
		public bool goto_line_offset (int line, int line_offset);
		public bool is_local ();
		public bool is_untitled ();
		public bool is_untouched ();
		public void set_content_type (string? content_type);
		public void set_language (Gtk.SourceLanguage? lang);
		public void set_location (GLib.File location);
		public void set_search_context (Gtk.SourceSearchContext? search_context);
		public void set_short_name_for_display (string? short_name);
		public string content_type { owned get; set; }
		public string mime_type { owned get; }
		[NoAccessorMethod]
		public bool read_only { get; }
		[NoAccessorMethod]
		public string shortname { owned get; set; }
		[NoAccessorMethod]
		public bool use_gvfs_metadata { get; construct; }
		public virtual signal void cursor_moved ();
		public virtual signal void load ();
		public virtual signal void loaded ();
		public virtual signal void save ();
		public virtual signal void saved ();
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_encodings_combo_box_get_type ()")]
	public class EncodingsComboBox : Gtk.ComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EncodingsComboBox (bool save_mode);
		public unowned Gtk.SourceEncoding get_selected_encoding ();
		public void set_selected_encoding (Gtk.SourceEncoding encoding);
		[NoAccessorMethod]
		public bool save_mode { get; set construct; }
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_file_chooser_dialog_get_type ()")]
	public class FileChooserDialog : Gtk.FileChooserDialog, Atk.Implementor, Gtk.Buildable, Gtk.FileChooser {
		[CCode (has_construct_function = false)]
		protected FileChooserDialog ();
		public unowned Gtk.SourceEncoding get_encoding ();
		public Gtk.SourceNewlineType get_newline_type ();
		public void set_encoding (Gtk.SourceEncoding encoding);
		public void set_newline_type (Gtk.SourceNewlineType newline_type);
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_message_get_type ()")]
	public class Message : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Message ();
		public GLib.Type get_key_type (string key);
		public void* get_message_type ();
		public unowned string get_method ();
		public unowned string get_object_path ();
		public GLib.Value get_value (string key);
		public bool has_key (string key);
		public GLib.Value set_value (string key);
		public void set_valuesv ([CCode (array_length_cname = "n_values", array_length_pos = 2.1)] string[] keys, [CCode (array_length_cname = "n_values", array_length_pos = 2.1)] GLib.Value[] values);
		public bool validate ();
		public string method { get; }
		public string object_path { get; }
		[NoAccessorMethod]
		public Xed.MessageType type { owned get; construct; }
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_message_bus_get_type ()")]
	public class MessageBus : GLib.Object {
		[CCode (has_construct_function = false)]
		public MessageBus ();
		public void block (uint id);
		public void block_by_func (string object_path, string method, Xed.MessageCallback callback);
		public uint connect (string object_path, string method, owned Xed.MessageCallback callback);
		public void disconnect (uint id);
		public void disconnect_by_func (string object_path, string method, Xed.MessageCallback callback);
		public void @foreach (Xed.MessageBusForeach func);
		public static unowned Xed.MessageBus get_default ();
		public bool is_registered (string object_path, string method);
		public Xed.MessageType lookup (string object_path, string method);
		public void send_message (Xed.Message message);
		public void send_message_sync (Xed.Message message);
		public void unblock (uint id);
		public void unblock_by_func (string object_path, string method, Xed.MessageCallback callback);
		public void unregister (Xed.MessageType message_type);
		public void unregister_all (string object_path);
		public virtual signal void dispatch (Xed.Message message);
		public virtual signal void registered (Xed.MessageType message_type);
		public virtual signal void unregistered (Xed.MessageType message_type);
	}
	[CCode (cheader_filename = "Xed-1.0.h", ref_function = "xed_message_type_ref", type_id = "xed_message_type_get_type ()", unref_function = "xed_message_type_unref")]
	[Compact]
	public class MessageType {
		public void @foreach (Xed.MessageTypeForeach func);
		public unowned string get_method ();
		public unowned string get_object_path ();
		public static string identifier (string? object_path, string? method);
		public static bool is_supported (GLib.Type type);
		public static bool is_valid_object_path (string? object_path);
		public GLib.Type lookup (string key);
		public Xed.MessageType @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_notebook_get_type ()")]
	public class Notebook : Gtk.Notebook, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Notebook ();
		public void add_tab (Xed.Tab tab, int position, bool jump_to);
		public GLib.List<weak Gtk.Widget> get_all_tabs ();
		public bool get_close_buttons_sensitive ();
		public bool get_tab_drag_and_drop_enabled ();
		public bool get_tab_scrolling_enabled ();
		public void move_tab (Xed.Notebook dest, Xed.Tab tab, int dest_position);
		public void remove_all_tabs ();
		public void remove_tab (Xed.Tab tab);
		public void reorder_tab (Xed.Tab tab, int dest_position);
		public void set_close_buttons_sensitive (bool sensitive);
		public void set_tab_drag_and_drop_enabled (bool enable);
		public void set_tab_scrolling_enabled (bool enable);
		public virtual signal void tab_added (Xed.Tab tab);
		public virtual signal void tab_close_request (Xed.Tab tab);
		public virtual signal void tab_detached (Xed.Tab tab);
		public virtual signal void tab_removed (Xed.Tab tab);
		public virtual signal void tabs_reordered ();
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_panel_get_type ()")]
	public class Panel : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Panel (Gtk.Orientation orientation);
		public bool activate_item (Gtk.Widget item);
		public void add_item (Gtk.Widget item, string name, string icon_name);
		public int get_n_items ();
		public Gtk.Orientation get_orientation ();
		public bool item_is_active (Gtk.Widget item);
		public bool remove_item (Gtk.Widget item);
		public Gtk.Orientation orientation { get; construct; }
		public virtual signal void close ();
		public virtual signal void focus_document ();
		public virtual signal void item_added (Gtk.Widget item);
		public virtual signal void item_removed (Gtk.Widget item);
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_progress_info_bar_get_type ()")]
	public class ProgressInfoBar : Gtk.InfoBar, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ProgressInfoBar (string icon_name, string markup, bool has_cancel);
		public void pulse ();
		public void set_fraction (double fraction);
		public void set_icon_name (string icon_name);
		public void set_markup (string markup);
		public void set_text (string text);
		[NoAccessorMethod]
		public bool has_cancel_button { construct; }
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_searchbar_get_type ()")]
	public class Searchbar : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		public weak Xed.Window window;
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Searchbar (Gtk.Window parent);
		public void find_again (bool backward);
		public bool get_backwards ();
		public bool get_parse_escapes ();
		public unowned string get_replace_text ();
		public unowned Gtk.SourceSearchSettings get_search_settings ();
		public unowned string get_search_text ();
		public void hide ();
		public void set_parse_escapes (bool parse_escapes);
		public void set_search_text (string search_text);
		public void show (Xed.SearchMode search_mode);
		[NoWrapper]
		public virtual bool show_replace ();
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_statusbar_get_type ()")]
	public class Statusbar : Gtk.Statusbar, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Statusbar ();
		public void clear_overwrite ();
		public void set_cursor_position (int line, int col);
		public void set_overwrite (bool overwrite);
		public void set_window_state (Xed.WindowState state, int num_of_errors);
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_tab_get_type ()")]
	public class Tab : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected Tab ();
		public bool get_auto_save_enabled ();
		public int get_auto_save_interval ();
		public unowned Xed.Document get_document ();
		public static unowned Xed.Tab get_from_document (Xed.Document doc);
		public Xed.TabState get_state ();
		public unowned Xed.View get_view ();
		public void set_auto_save_enabled (bool enable);
		public void set_auto_save_interval (int interval);
		public void set_info_bar (Gtk.Widget info_bar);
		[NoAccessorMethod]
		public bool autosave { get; set; }
		[NoAccessorMethod]
		public int autosave_interval { get; set; }
		[NoAccessorMethod]
		public bool can_close { get; }
		[NoAccessorMethod]
		public string name { owned get; }
		public Xed.TabState state { get; }
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_view_get_type ()")]
	public class View : Gtk.SourceView, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public View (Xed.Document doc);
		public void copy_clipboard ();
		public void cut_clipboard ();
		public void delete_selection ();
		public void paste_clipboard ();
		public void scroll_to_cursor ();
		public void select_all ();
		public void set_draw_whitespace (bool enable);
		public void set_font (bool def, string font_name);
		public void update_draw_whitespace_locations_and_types ();
		public virtual signal void drop_uris ([CCode (array_length = false, array_null_terminated = true)] string[] uri_list);
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_id = "xed_window_get_type ()")]
	public class Window : Gtk.ApplicationWindow, Atk.Implementor, GLib.ActionGroup, GLib.ActionMap, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected Window ();
		public void close_all_tabs ();
		public void close_tab (Xed.Tab tab);
		public void close_tabs (GLib.List<Xed.Tab> tabs);
		public unowned Xed.Tab create_tab (bool jump_to);
		public unowned Xed.Tab create_tab_from_location (GLib.File location, Gtk.SourceEncoding? encoding, int line_pos, bool create, bool jump_to);
		public unowned Xed.Tab create_tab_from_stream (GLib.InputStream stream, Gtk.SourceEncoding encoding, int line_pos, bool jump_to);
		public unowned Xed.Document get_active_document ();
		public unowned Xed.Tab get_active_tab ();
		public unowned Xed.View get_active_view ();
		public unowned Xed.Panel get_bottom_panel ();
		public GLib.List<weak Xed.Document> get_documents ();
		public unowned Gtk.WindowGroup get_group ();
		public unowned Xed.MessageBus get_message_bus ();
		public unowned Gtk.Widget get_searchbar ();
		public unowned Xed.Panel get_side_panel ();
		public Xed.WindowState get_state ();
		public unowned Gtk.Widget get_statusbar ();
		public unowned Xed.Tab get_tab_from_location (GLib.File location);
		public unowned Gtk.UIManager get_ui_manager ();
		public GLib.List<weak Xed.Document> get_unsaved_documents ();
		public GLib.List<weak Xed.View> get_views ();
		public void set_active_tab (Xed.Tab tab);
		public Xed.WindowState state { get; }
		public virtual signal void active_tab_changed (Xed.Tab tab);
		public virtual signal void active_tab_state_changed ();
		public virtual signal void tab_added (Xed.Tab tab);
		public virtual signal void tab_removed (Xed.Tab tab);
		public virtual signal void tabs_reordered ();
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_cname = "XedAppActivatableInterface", type_id = "xed_app_activatable_get_type ()")]
	public interface AppActivatable : GLib.Object {
		public abstract void activate ();
		public abstract void deactivate ();
		[NoAccessorMethod]
		public abstract Xed.App app { owned get; construct; }
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_cname = "XedViewActivatableInterface", type_id = "xed_view_activatable_get_type ()")]
	public interface ViewActivatable : GLib.Object {
		public abstract void activate ();
		public abstract void deactivate ();
		[NoAccessorMethod]
		public abstract Xed.View view { owned get; construct; }
	}
	[CCode (cheader_filename = "Xed-1.0.h", type_cname = "XedWindowActivatableInterface", type_id = "xed_window_activatable_get_type ()")]
	public interface WindowActivatable : GLib.Object {
		public abstract void activate ();
		public abstract void deactivate ();
		public abstract void update_state ();
		[NoAccessorMethod]
		public abstract Xed.Window window { owned get; construct; }
	}
	[CCode (cheader_filename = "Xed-1.0.h", cprefix = "XED_", type_id = "xed_debug_section_get_type ()")]
	[Flags]
	public enum DebugSection {
		NO_DEBUG,
		DEBUG_VIEW,
		DEBUG_SEARCH,
		DEBUG_PRINT,
		DEBUG_PREFS,
		DEBUG_PLUGINS,
		DEBUG_TAB,
		DEBUG_DOCUMENT,
		DEBUG_COMMANDS,
		DEBUG_APP,
		DEBUG_SESSION,
		DEBUG_UTILS,
		DEBUG_METADATA,
		DEBUG_WINDOW,
		DEBUG_LOADER,
		DEBUG_SAVER
	}
	[CCode (cheader_filename = "Xed-1.0.h", cprefix = "XED_SEARCH_MODE_", type_id = "xed_search_mode_get_type ()")]
	public enum SearchMode {
		SEARCH,
		REPLACE
	}
	[CCode (cheader_filename = "Xed-1.0.h", cprefix = "XED_TAB_", type_id = "xed_tab_state_get_type ()")]
	public enum TabState {
		STATE_NORMAL,
		STATE_LOADING,
		STATE_REVERTING,
		STATE_SAVING,
		STATE_PRINTING,
		STATE_PRINT_PREVIEWING,
		STATE_SHOWING_PRINT_PREVIEW,
		STATE_GENERIC_NOT_EDITABLE,
		STATE_LOADING_ERROR,
		STATE_REVERTING_ERROR,
		STATE_SAVING_ERROR,
		STATE_GENERIC_ERROR,
		STATE_CLOSING,
		STATE_EXTERNALLY_MODIFIED_NOTIFICATION,
		NUM_OF_STATES
	}
	[CCode (cheader_filename = "Xed-1.0.h", cprefix = "XED_WINDOW_STATE_", type_id = "xed_window_state_get_type ()")]
	[Flags]
	public enum WindowState {
		NORMAL,
		SAVING,
		PRINTING,
		LOADING,
		ERROR,
		SAVING_SESSION
	}
	[CCode (cheader_filename = "Xed-1.0.h", has_target = false)]
	public delegate void MessageBusForeach (Xed.MessageType message_type, void* userdata);
	[CCode (cheader_filename = "Xed-1.0.h", has_target = false)]
	public delegate void MessageCallback (Xed.MessageBus bus, Xed.Message message, void* userdata);
	[CCode (cheader_filename = "Xed-1.0.h", instance_pos = 3.9)]
	public delegate void MessageTypeForeach (string key, GLib.Type type, bool required);
	[CCode (cheader_filename = "Xed-1.0.h", cname = "XED_METADATA_ATTRIBUTE_ENCODING")]
	public const string METADATA_ATTRIBUTE_ENCODING;
	[CCode (cheader_filename = "Xed-1.0.h", cname = "XED_METADATA_ATTRIBUTE_LANGUAGE")]
	public const string METADATA_ATTRIBUTE_LANGUAGE;
	[CCode (cheader_filename = "Xed-1.0.h", cname = "XED_METADATA_ATTRIBUTE_POSITION")]
	public const string METADATA_ATTRIBUTE_POSITION;
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void commands_load_location (Xed.Window window, GLib.File location, Gtk.SourceEncoding? encoding, int line_pos);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static GLib.SList<weak Xed.Document> commands_load_locations (Xed.Window window, GLib.SList<GLib.File> locations, Gtk.SourceEncoding? encoding, int line_pos);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void commands_save_all_documents (Xed.Window window);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void commands_save_document (Xed.Window window, Xed.Document document);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static async bool commands_save_document_async (Xed.Document document, Xed.Window window, GLib.Cancellable? cancellable);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void debug (Xed.DebugSection section, string file, int line, string function);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void debug_init ();
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void marshal_BOOLEAN__OBJECT (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void marshal_BOOLEAN__VOID (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void marshal_VOID__BOOLEAN_POINTER (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void marshal_VOID__BOXED_BOXED (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void marshal_VOID__INT_INT (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void marshal_VOID__OBJECT_BOXED_FLAGS (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void marshal_VOID__OBJECT_BOXED_INT_BOOLEAN (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
	[CCode (cheader_filename = "Xed-1.0.h")]
	public static void marshal_VOID__UINT64_UINT64 (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);
}
